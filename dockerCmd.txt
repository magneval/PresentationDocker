Usage: docker [OPTIONS] COMMAND [arg...]

A self-sufficient runtime for linux containers.

Options:
  --api-enable-cors=false                  Enable CORS headers in the remote API
  -b, --bridge=""                          Attach containers to a pre-existing network bridge
                                             use 'none' to disable container networking
  --bip=""                                 Use this CIDR notation address for the network bridge's IP, not compatible with -b
  -D, --debug=false                        Enable debug mode
  -d, --daemon=false                       Enable daemon mode
  --dns=[]                                 Force Docker to use specific DNS servers
  --dns-search=[]                          Force Docker to use specific DNS search domains
  -e, --exec-driver="native"               Force the Docker runtime to use a specific exec driver
  --fixed-cidr=""                          IPv4 subnet for fixed IPs (ex: 10.20.0.0/16)
                                             this subnet must be nested in the bridge subnet (which is defined by -b or --bip)
  -G, --group="docker"                     Group to assign the unix socket specified by -H when running in daemon mode
                                             use '' (the empty string) to disable setting of a group
  -g, --graph="/var/lib/docker"            Path to use as the root of the Docker runtime
  -H, --host=[]                            The socket(s) to bind to in daemon mode or connect to in client mode, specified using one or more tcp://host:port, unix:///path/to/socket, fd://* or fd://socketfd.
  --icc=true                               Enable inter-container communication
  --insecure-registry=[]                   Enable insecure communication with specified registries (no certificate verification for HTTPS and enable HTTP fallback) (e.g., localhost:5000 or 10.20.0.0/16)
  --ip=0.0.0.0                             Default IP address to use when binding container ports
  --ip-forward=true                        Enable net.ipv4.ip_forward
  --ip-masq=true                           Enable IP masquerading for bridge's IP range
  --iptables=true                          Enable Docker's addition of iptables rules
  --mtu=0                                  Set the containers network MTU
                                             if no value is provided: default to the default route MTU or 1500 if no default route is available
  -p, --pidfile="/var/run/docker.pid"      Path to use for daemon PID file
  --registry-mirror=[]                     Specify a preferred Docker registry mirror
  -s, --storage-driver=""                  Force the Docker runtime to use a specific storage driver
  --selinux-enabled=false                  Enable selinux support. SELinux does not presently support the BTRFS storage driver
  --storage-opt=[]                         Set storage driver options
  --tls=false                              Use TLS; implied by tls-verify flags
  --tlscacert="/home/pi/.docker/ca.pem"    Trust only remotes providing a certificate signed by the CA given here
  --tlscert="/home/pi/.docker/cert.pem"    Path to TLS certificate file
  --tlskey="/home/pi/.docker/key.pem"      Path to TLS key file
  --tlsverify=false                        Use TLS and verify the remote (daemon: verify client, client: verify daemon)
  -v, --version=false                      Print version information and quit

Commands:
    attach    Attach to a running container
    build     Build an image from a Dockerfile
    commit    Create a new image from a container's changes
    cp        Copy files/folders from a container's filesystem to the host path
    create    Create a new container
    diff      Inspect changes on a container's filesystem
    events    Get real time events from the server
    exec      Run a command in an existing container
    export    Stream the contents of a container as a tar archive
    history   Show the history of an image
    images    List images
    import    Create a new filesystem image from the contents of a tarball
    info      Display system-wide information
    inspect   Return low-level information on a container
    kill      Kill a running container
    load      Load an image from a tar archive
    login     Register or log in to a Docker registry server
    logout    Log out from a Docker registry server
    logs      Fetch the logs of a container
    port      Lookup the public-facing port that is NAT-ed to PRIVATE_PORT
    pause     Pause all processes within a container
    ps        List containers
    pull      Pull an image or a repository from a Docker registry server
    push      Push an image or a repository to a Docker registry server
    restart   Restart a running container
    rm        Remove one or more containers
    rmi       Remove one or more images
    run       Run a command in a new container
    save      Save an image to a tar archive
    search    Search for an image on the Docker Hub
    start     Start a stopped container
    stop      Stop a running container
    tag       Tag an image into a repository
    top       Lookup the running processes of a container
    unpause   Unpause a paused container
    version   Show the Docker version information
    wait      Block until a container stops, then print its exit code

Run 'docker COMMAND --help' for more information on a command.
